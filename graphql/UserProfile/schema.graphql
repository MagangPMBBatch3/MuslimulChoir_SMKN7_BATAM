type UserProfile {
    id: ID!
    user_id: ID
    nama_lengkap: String!
    nrp: String
    alamat: String
    foto: String
    bagian_id: ID
    level_id: ID
    status_id: ID
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    user: User @belongsTo
    bagian: Bagian @belongsTo
    level: Level @belongsTo
    status: Status @belongsTo
}  

input CreateUserProfileInput {
    user_id: ID
    nama_lengkap: String!
    nrp: String
    alamat: String
    foto: String
    bagian_id: ID
    level_id: ID
    status_id: ID
}

input UpdateUserProfileInput {
    user_id: ID
    nama_lengkap: String
    nrp: String
    alamat: String
    foto: String
    bagian_id: ID
    level_id: ID
    status_id: ID
}


extend type Query {
    allUserProfile: [UserProfile!]!
        @all(model: "App\\Models\\UserProfile\\UserProfile")

    allUserProfileArsip: [UserProfile!]!
    @field(resolver: "App\\GraphQL\\UserProfile\\Queries\\UserProfileQuery@allArsip")

    # cari UserProfile berdasarkan ID
    UserProfile(id: ID! @eq ): UserProfile
        @find(model: "App\\Models\\UserProfile\\UserProfile")

    getUserProfiles(search: String): [UserProfile!]!
    @field(resolver: "App\\GraphQL\\UserProfile\\Queries\\UserProfileQuery@getUserProfiles")
        
}

extend type Mutation {
    createUserProfile(input: CreateUserProfileInput! @spread): UserProfile
        @create(model: "App\\Models\\UserProfile\\UserProfile")

    updateUserProfile(
        id: ID! @eq(key: "id"),
        input: UpdateUserProfileInput! @spread): UserProfile
        @update(model: "App\\Models\\UserProfile\\UserProfile")

    deleteUserProfile(id: ID! @eq(key: "id")): UserProfile
        @delete(model: "App\\Models\\UserProfile\\UserProfile")

    restoreUserProfile(id: ID!): UserProfile
        @field(resolver: "App\\GraphQL\\UserProfile\\Mutations\\UserProfileMutation@restore")

    forceDeleteUserProfile(id: ID!): UserProfile
        @field(resolver: "App\\GraphQL\\UserProfile\\Mutations\\UserProfileMutation@forceDelete")
}
